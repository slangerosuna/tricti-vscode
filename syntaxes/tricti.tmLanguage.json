{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "TriCTI",
  "scopeName": "source.tricti",
  "patterns": [
    { "include": "#comments" },
    { "include": "#attributes" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#operators" },
    { "include": "#functions" },
    { "include": "#types" },
    { "include": "#constants" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.hash.tricti",
          "match": "#.*$"
        },
        {
          "name": "comment.block.tricti",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.tricti",
          "match": "\\b(if|else|while|for|match|ret|cont|break|in|async|await|extern|from|where)\\b"
        },
        {
          "name": "keyword.other.tricti",
          "match": "\\b(db|table|compose|struct|enum|impl|trait|use|mod|pub|let|mut|const|static|fn|type|where|self|Self|super|crate|sys|shader|vert|frag|comp|new|emit|select|from|on|join|inner|left|right|full|query|res)\\b"
        },
        {
          "name": "storage.type.tricti",
          "match": "\\b(i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|bool|char|str|string|none|some)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.tricti",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.tricti",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.tricti",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.tricti",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.tricti",
          "match": "\\b\\d+(?:i8|i16|i32|i64|u8|u16|u32|u64)?\\b"
        },
        {
          "name": "constant.numeric.float.tricti",
          "match": "\\b\\d+\\.\\d+(?:f32|f64)?\\b"
        },
        {
          "name": "constant.numeric.hex.tricti",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.binary.tricti",
          "match": "\\b0b[01]+\\b"
        },
        {
          "name": "constant.numeric.octal.tricti",
          "match": "\\b0o[0-7]+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.tricti",
          "match": "(:=|=)"
        },
        {
          "name": "keyword.operator.comparison.tricti",
          "match": "(==|!=|<|>|<=|>=|~=)"
        },
        {
          "name": "keyword.operator.arithmetic.tricti",
          "match": "(\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.logical.tricti",
          "match": "(&&|\\|\\||!|~)"
        },
        {
          "name": "keyword.operator.bitwise.tricti",
          "match": "(&|\\||\\^|<<|>>)"
        },
        {
          "name": "keyword.operator.access.tricti",
          "match": "(\\.|->|::)"
        },
        {
          "name": "keyword.operator.range.tricti",
          "match": "(\\.\\.|\\.\\.=)"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.tricti",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*::"
        },
        {
          "name": "entity.name.function.call.tricti",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "entity.name.type.tricti",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "storage.type.generic.tricti",
          "match": "<[^>]*>"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.tricti",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.tricti",
          "match": "\\bnone\\b"
        }
      ]
    },
    "attributes": {
      "patterns": [
        {
          "name": "meta.attribute.tricti",
          "begin": "@\\w+",
          "beginCaptures": {
            "0": { "name": "entity.name.function.decorator.tricti" }
          },
          "end": "(?=[,\\n\\r]|$|[;})])",
          "patterns": [
            { "include": "#attribute-contents" }
          ]
        }
      ]
    },
    "attribute-contents": {
      "patterns": [
        {
          "name": "meta.attribute.parameters.tricti",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            { "include": "#strings" },
            { "include": "#numbers" },
            { "include": "#types" },
            { "include": "#identifiers" },
            {
              "name": "punctuation.separator.attribute.tricti",
              "match": ","
            }
          ]
        },
        {
          "name": "entity.name.attribute.parameter.tricti",
          "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
        },
        {
          "name": "punctuation.separator.attribute.tricti", 
          "match": ","
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.tricti",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}
